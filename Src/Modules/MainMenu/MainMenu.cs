using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using Spectre.Console;
using campuslovejorge_edwin.Src.Modules.User.Domain.Entities;
using campuslovejorge_edwin.Src.Modules.User.Application.Services;
using campuslovejorge_edwin.Src.Modules.Interaction.Application.Services;
using campuslovejorge_edwin.Src.Modules.Interaction.UI;
using campuslovejorge_edwin.Src.Modules.Interaction.Infrastructure.Repositories;
using campuslovejorge_edwin.Src.Shared.Context;

namespace campuslovejorge_edwin.Src.Modules.MainMenu
{
    public class MainMenu
    {
        private readonly AuthService _authService;
        private readonly UserService _userService;
        private readonly InteractionService _interactionService;
        private UserEntity? _currentUser;

        public MainMenu(AuthService authService, UserService userService, InteractionService interactionService)
        {
            _authService = authService;
            _userService = userService;
            _interactionService = interactionService;
        }

        public async Task StartAsync()
        {
            Console.WriteLine("DEBUG: StartAsync iniciado");
            var exit = false;
            
            while (!exit)
            {
                Console.WriteLine("DEBUG: Iniciando bucle del men√∫");
                AnsiConsole.Clear();
                
                // T√≠tulo principal con estilo
                AnsiConsole.Write(
                    new FigletText("CAMPUS LOVE")
                        .Centered()
                        .Color(Color.Purple));
                
                AnsiConsole.Write(
                    new Rule("[yellow]Sistema de Citas Universitarias[/]")
                        .RuleStyle("blue")
                        .Centered());

                if (_currentUser == null)
                {
                    Console.WriteLine("DEBUG: Usuario no autenticado, mostrando men√∫ de login");
                    // Usuario no autenticado
                    var choice = AnsiConsole.Prompt(
                        new SelectionPrompt<string>()
                            .Title("[green]Bienvenido a Campus Love[/]")
                            .AddChoices(new[] {
                                "üîê Iniciar Sesi√≥n",
                                "üë§ Registrarse",
                                "‚ùå Salir"
                            }));

                    switch (choice)
                    {
                        case "üîê Iniciar Sesi√≥n":
                            await LoginAsync();
                            break;
                        case "üë§ Registrarse":
                            await RegisterAsync();
                            break;
                        case "‚ùå Salir":
                            exit = true;
                            break;
                    }
                    
                    // Solo continuar el bucle si el usuario no est√° autenticado
                    // Si se autentic√≥, el bucle continuar√° y mostrar√° el men√∫ autenticado
                }
                else
                {
                    Console.WriteLine("DEBUG: Usuario autenticado, mostrando men√∫ principal");
                    // Usuario autenticado
                    await ShowAuthenticatedMenuAsync();
                }
            }
            
            Console.WriteLine("DEBUG: Saliendo del bucle del men√∫");
            AnsiConsole.Write(
                new Rule("[green]¬°Gracias por usar Campus Love![/]")
                    .RuleStyle("green")
                    .Centered());
        }

        private async Task LoginAsync()
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Iniciar Sesi√≥n[/]")
                    .RuleStyle("blue")
                    .Centered());

            try
            {
                var email = AnsiConsole.Ask<string>("[green]Email:[/]");
                var password = AnsiConsole.Prompt(
                    new TextPrompt<string>("[green]Contrase√±a:[/]")
                        .Secret());

                var user = await _authService.LoginAsync(email, password);
                
                if (user != null)
                {
                    _currentUser = user;
                    AnsiConsole.MarkupLine($"[green]‚úÖ ¬°Bienvenido, {user.FullName}![/]");
                    AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
                    Console.ReadKey();
                }
                else
                {
                    AnsiConsole.MarkupLine("[red]‚ùå Credenciales incorrectas[/]");
                    AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
                    Console.ReadKey();
                }
            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå Error: {ex.Message}[/]");
                AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
                Console.ReadKey();
            }
        }

        private async Task RegisterAsync()
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Registrarse[/]")
                    .RuleStyle("blue")
                    .Centered());

            try
            {
                var name = AnsiConsole.Ask<string>("[green]Nombre completo:[/]");
                var email = AnsiConsole.Ask<string>("[green]Email:[/]");
                var password = AnsiConsole.Prompt(
                    new TextPrompt<string>("[green]Contrase√±a:[/]")
                        .Secret());
                
                var birthdate = AnsiConsole.Prompt(
                    new TextPrompt<DateTime>("[green]Fecha de nacimiento (yyyy-MM-dd):[/]")
                        .ValidationErrorMessage("[red]Formato de fecha inv√°lido. Use yyyy-MM-dd[/]")
                        .DefaultValue(DateTime.Now.AddYears(-18)));

                // Validar edad m√≠nima
                var age = DateTime.Today.Year - birthdate.Year;
                if (birthdate.Date > DateTime.Today.AddYears(-age)) age--;
                
                if (age < 18)
                {
                    AnsiConsole.MarkupLine("[red]‚ùå Debes ser mayor de 18 a√±os para registrarte[/]");
                    AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
                    Console.ReadKey();
                    return;
                }

                var genderId = await SelectGenderAsync();
                var orientationId = await SelectOrientationAsync();
                
                var careerId = await SelectCareerAsync();
                var profilePhrase = AnsiConsole.Ask<string>("[green]Frase de perfil (opcional):[/]");

                var user = new UserEntity
                {
                    FullName = name.Trim().ToUpper(),
                    Email = email.Trim().ToLower(),
                    PasswordHash = AuthService.HashPassword(password),
                    Birthdate = birthdate,
                    GenderId = genderId,
                    OrientationId = orientationId,
                    CareerId = careerId,
                    ProfilePhrase = profilePhrase.Trim()
                };

                await _userService.AddUserAsync(user);
                AnsiConsole.MarkupLine("[green]‚úÖ Usuario registrado exitosamente![/]");
                AnsiConsole.MarkupLine("[blue]Ahora puedes iniciar sesi√≥n.[/]");
            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå Error: {ex.Message}[/]");
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task ShowAuthenticatedMenuAsync()
        {
            if (_currentUser == null) return;

            // Mostrar informaci√≥n del usuario actual
            var userInfoTable = new Table()
                .Border(TableBorder.Rounded)
                .AddColumn("[blue]Usuario Actual[/]")
                .AddColumn("[green]Valor[/]");

            userInfoTable.AddRow("üë§ Nombre", _currentUser.FullName);
            userInfoTable.AddRow("üìß Email", _currentUser.Email);
            userInfoTable.AddRow("üéÇ Fecha de nacimiento", _currentUser.Birthdate.ToString("dd/MM/yyyy"));

            AnsiConsole.Write(userInfoTable);
            AnsiConsole.WriteLine();

            // Verificar si es administrador
            var isAdmin = await _authService.IsAdminAsync(_currentUser.UserId);
            if (isAdmin)
            {
                AnsiConsole.MarkupLine("[red]üëë Eres Administrador[/]");
                AnsiConsole.WriteLine();
            }

            // Men√∫ principal
            var choice = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[green]¬øQu√© deseas hacer?[/]")
                    .AddChoices(new[] {
                        "üëÄ Revisar Perfiles",
                        "‚ù§Ô∏è  Mis Likes",
                        "üíï Mis Matches",
                        "üìä Estad√≠sticas",
                        "üèÜ Estad√≠sticas del Sistema",
                        isAdmin ? "üëë Panel de Administrador" : "",
                        "üë§ Gestionar Mi Perfil",
                        "üîì Cerrar Sesi√≥n"
                    }.Where(x => !string.IsNullOrEmpty(x)).ToArray()));

            switch (choice)
            {
                case "üëÄ Revisar Perfiles":
                    await ShowProfileReviewerAsync();
                    break;
                case "‚ù§Ô∏è  Mis Likes":
                    await ShowMyLikesAsync();
                    break;
                case "üíï Mis Matches":
                    await ShowMyMatchesAsync();
                    break;
                case "üìä Estad√≠sticas":
                    await ShowStatsAsync();
                    break;
                case "üèÜ Estad√≠sticas del Sistema":
                    await ShowSystemAdvancedStatsAsync();
                    break;
                case "üëë Panel de Administrador":
                    if (isAdmin)
                        await ShowAdminPanelAsync();
                    break;
                case "üë§ Gestionar Mi Perfil":
                    await ShowUserManagementAsync();
                    break;
                case "üîì Cerrar Sesi√≥n":
                    _currentUser = null;
                    AnsiConsole.MarkupLine("[yellow]Sesi√≥n cerrada exitosamente[/]");
                    AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
                    Console.ReadKey();
                    break;
            }
        }

        private async Task ShowProfileReviewerAsync()
        {
            if (_currentUser == null) return;

            var profileReviewer = new ProfileReviewer(_interactionService, _userService, _currentUser.UserId);
            await profileReviewer.StartProfileReviewAsync();
        }

        private async Task ShowMyLikesAsync()
        {
            if (_currentUser == null) return;

            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Mis Likes[/]")
                    .RuleStyle("blue")
                    .Centered());

            var myLikes = await _interactionService.GetUsersLikedByAsync(_currentUser.UserId);
            var whoLikedMe = await _interactionService.GetUsersWhoLikedAsync(_currentUser.UserId);

            if (!myLikes.Any() && !whoLikedMe.Any())
            {
                AnsiConsole.MarkupLine("[yellow]A√∫n no tienes actividad de likes.[/]");
            }
            else
            {
                if (myLikes.Any())
                {
                    AnsiConsole.MarkupLine($"[green]‚ù§Ô∏è  Personas que te gustaron ({myLikes.Count}):[/]");
                    var likesTable = CreateUsersTable(myLikes);
                    AnsiConsole.Write(likesTable);
                    AnsiConsole.WriteLine();
                }

                if (whoLikedMe.Any())
                {
                    AnsiConsole.MarkupLine($"[blue]üíï Personas a las que les gustaste ({whoLikedMe.Count}):[/]");
                    var likedMeTable = CreateUsersTable(whoLikedMe);
                    AnsiConsole.Write(likedMeTable);
                }
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task ShowMyMatchesAsync()
        {
            if (_currentUser == null) return;

            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Mis Matches[/]")
                    .RuleStyle("blue")
                    .Centered());

            var matches = await _interactionService.GetMatchesAsync(_currentUser.UserId);

            if (!matches.Any())
            {
                AnsiConsole.MarkupLine("[yellow]A√∫n no tienes matches.[/]");
                AnsiConsole.MarkupLine("[blue]¬°Sigue revisando perfiles para encontrar tu match![/]");
            }
            else
            {
                AnsiConsole.MarkupLine($"[green]üíï Tienes {matches.Count} match(es):[/]");
                
                var matchesTable = new Table()
                    .Border(TableBorder.Rounded)
                    .AddColumn("[blue]Match #[/]")
                    .AddColumn("[green]Persona[/]")
                                            .AddColumn("[blue]Fecha del Match[/]");

                for (int i = 0; i < matches.Count; i++)
                {
                    var match = matches[i];
                    var otherUserId = match.User1Id == _currentUser.UserId ? match.User2Id : match.User1Id;
                    var otherUser = await _userService.GetUserByIdAsync(otherUserId);
                    
                    if (otherUser != null)
                    {
                        matchesTable.AddRow(
                            (i + 1).ToString(),
                            otherUser.FullName,
                            match.CreatedAt.ToString("dd/MM/yyyy HH:mm")
                        );
                    }
                }

                AnsiConsole.Write(matchesTable);
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task ShowStatsAsync()
        {
            if (_currentUser == null) return;

            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Estad√≠sticas[/]")
                    .RuleStyle("blue")
                    .Centered());

            var likesSent = await _interactionService.GetLikesSentCountAsync(_currentUser.UserId);
            var likesReceived = await _interactionService.GetLikesReceivedCountAsync(_currentUser.UserId);
            var matchesCount = await _interactionService.GetMatchesCountAsync(_currentUser.UserId);

            var statsTable = new Table()
                .Border(TableBorder.Rounded)
                .AddColumn("[blue]Estad√≠stica[/]")
                .AddColumn("[green]Valor[/]");

            statsTable.AddRow("‚ù§Ô∏è  Likes enviados", likesSent.ToString());
            statsTable.AddRow("üíï Likes recibidos", likesReceived.ToString());
            statsTable.AddRow("üéâ Matches", matchesCount.ToString());

            AnsiConsole.Write(statsTable);

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task ShowSystemAdvancedStatsAsync()
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Estadisticas del Sistema[/]")
                    .RuleStyle("blue")
                    .Centered());

            try
            {
                // Estad√≠sticas b√°sicas
                var totalUsers = (await _userService.GetAllUsersAsync()).Count;
                var averageLikes = await _interactionService.GetAverageLikesPerUserAsync();
                var usersWithoutLikes = await _interactionService.GetUsersWithoutLikesCountAsync();

                var basicStatsTable = new Table()
                    .Border(TableBorder.Rounded)
                    .AddColumn("Estadistica")
                    .AddColumn("Valor");

                basicStatsTable.AddRow("Total de Usuarios", totalUsers.ToString());
                basicStatsTable.AddRow("Promedio de Likes por Usuario", averageLikes.ToString("F2"));
                basicStatsTable.AddRow("Usuarios sin Likes", usersWithoutLikes.ToString());

                AnsiConsole.Write(basicStatsTable);
                AnsiConsole.WriteLine();

                // Top usuarios por likes
                var topUsersByLikes = await _interactionService.GetTopUsersByLikesAsync(5);
                if (topUsersByLikes.Any())
                {
                    AnsiConsole.WriteLine("Top 5 Usuarios con Mas Likes:");
                    var topLikesTable = new Table()
                        .Border(TableBorder.Rounded)
                        .AddColumn("Posicion")
                        .AddColumn("Usuario")
                        .AddColumn("Email");

                    for (int i = 0; i < topUsersByLikes.Count; i++)
                    {
                        var user = topUsersByLikes[i];
                        topLikesTable.AddRow(
                            (i + 1).ToString(),
                            user.FullName,
                            user.Email
                        );
                    }

                    AnsiConsole.Write(topLikesTable);
                    AnsiConsole.WriteLine();
                }
            }
            catch (Exception ex)
            {
                AnsiConsole.WriteLine($"Error al obtener estadisticas: {ex.Message}");
            }

            AnsiConsole.WriteLine();
            AnsiConsole.WriteLine("Presiona cualquier tecla para continuar...");
            Console.ReadKey();
        }

        private async Task ShowAdminPanelAsync()
        {
            if (_currentUser == null || !await _authService.IsAdminAsync(_currentUser.UserId)) return;

            var exit = false;
            
            while (!exit)
            {
                AnsiConsole.Clear();
                AnsiConsole.Write(
                    new Rule("[red]üëë Panel de Administrador[/]")
                        .RuleStyle("red")
                        .Centered());

                var choice = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[red]Selecciona una acci√≥n administrativa:[/]")
                        .AddChoices(new[] {
                            "üìã Listar Usuarios",
                            "‚úèÔ∏è  Editar Usuario",
                            "üóëÔ∏è  Eliminar Usuario",
                            "üìä Estad√≠sticas del Sistema",
                            "üîô Volver al Men√∫ Principal"
                        }));

                switch (choice)
                {
                    case "üìã Listar Usuarios":
                        await ListAllUsersAsync();
                        break;
                    case "‚úèÔ∏è  Editar Usuario":
                        await EditUserAsync();
                        break;
                    case "üóëÔ∏è  Eliminar Usuario":
                        await DeleteUserAsync();
                        break;
                    case "üìä Estad√≠sticas del Sistema":
                        await ShowSystemStatsAsync();
                        break;
                    case "üîô Volver al Men√∫ Principal":
                        exit = true;
                        break;
                }
            }
        }

        private async Task ListAllUsersAsync()
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[red]üìã Lista de Usuarios[/]")
                    .RuleStyle("red")
                    .Centered());

            var users = await _userService.GetAllUsersAsync();
            
            if (!users.Any())
            {
                AnsiConsole.MarkupLine("[yellow]No hay usuarios registrados.[/]");
            }
            else
            {
                var table = new Table()
                    .Border(TableBorder.Rounded)
                    .AddColumn("[red]ID[/]")
                    .AddColumn("[green]Nombre[/]")
                    .AddColumn("[blue]Email[/]")
                    .AddColumn("[blue]Fecha Nac.[/]")
                    .AddColumn("[yellow]G√©nero[/]")
                    .AddColumn("[blue]Orientaci√≥n[/]")
                    .AddColumn("[blue]Carrera[/]")
                    .AddColumn("[blue]Creado[/]");

                foreach (var user in users)
                {
                    table.AddRow(
                        user.UserId.ToString(),
                        user.FullName,
                        user.Email,
                        user.Birthdate.ToString("yyyy-MM-dd"),
                        await GetGenderNameAsync(user.GenderId),
                        await GetOrientationNameAsync(user.OrientationId),
                        await GetCareerNameAsync(user.CareerId),
                        user.CreatedAt.ToString("yyyy-MM-dd")
                    );
                }

                AnsiConsole.Write(table);
                AnsiConsole.MarkupLine($"[green]Total de usuarios: {users.Count}[/]");
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task EditUserAsync()
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[red]‚úèÔ∏è  Editar Usuario[/]")
                    .RuleStyle("red")
                    .Centered());

            try
            {
                var id = AnsiConsole.Ask<int>("[red]ID del usuario a editar:[/]");
                var user = await _userService.GetUserByIdAsync(id);
                
                if (user == null)
                {
                    AnsiConsole.MarkupLine("[red]‚ùå Usuario no encontrado.[/]");
                }
                else
                {
                    AnsiConsole.MarkupLine($"[blue]Editando usuario: {user.FullName}[/]");
                    
                    var newName = AnsiConsole.Ask<string>($"[green]Nuevo nombre (actual: {user.FullName}):[/]", user.FullName);
                    var newEmail = AnsiConsole.Ask<string>($"[green]Nuevo email (actual: {user.Email}):[/]", user.Email);
                    
                    user.FullName = newName;
                    user.Email = newEmail;

                    if (AnsiConsole.Confirm("[yellow]¬øConfirmar los cambios?[/]"))
                    {
                        await _userService.UpdateUserAsync(user);
                        AnsiConsole.MarkupLine("[green]‚úÖ Usuario actualizado exitosamente![/]");
                    }
                }
            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå Error: {ex.Message}[/]");
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task DeleteUserAsync()
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[red]üóëÔ∏è  Eliminar Usuario[/]")
                    .RuleStyle("red")
                    .Centered());

            try
            {
                var id = AnsiConsole.Ask<int>("[red]ID del usuario a eliminar:[/]");
                
                if (id == _currentUser?.UserId)
                {
                    AnsiConsole.MarkupLine("[red]‚ùå No puedes eliminar tu propio usuario.[/]");
                }
                else
                {
                    var user = await _userService.GetUserByIdAsync(id);
                    
                    if (user == null)
                    {
                        AnsiConsole.MarkupLine("[red]‚ùå Usuario no encontrado.[/]");
                    }
                    else
                    {
                        if (AnsiConsole.Confirm($"[red]‚ö†Ô∏è  ¬øEst√°s seguro de que deseas eliminar al usuario '{user.FullName}'?[/]"))
                        {
                            if (AnsiConsole.Confirm("[red]Esta acci√≥n no se puede deshacer. ¬øConfirmar eliminaci√≥n?[/]"))
                            {
                                await _userService.DeleteUserAsync(id);
                                AnsiConsole.MarkupLine("[green]‚úÖ Usuario eliminado exitosamente![/]");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå Error: {ex.Message}[/]");
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task ShowSystemStatsAsync()
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[red]üìä Estad√≠sticas del Sistema[/]")
                    .RuleStyle("red")
                    .Centered());

            var totalUsers = (await _userService.GetAllUsersAsync()).Count;
            var totalLikes = await _interactionService.GetLikesSentCountAsync(1) + await _interactionService.GetLikesReceivedCountAsync(1); // Aproximado
            var totalMatches = await _interactionService.GetMatchesCountAsync(1); // Aproximado

            var statsTable = new Table()
                .Border(TableBorder.Rounded)
                .AddColumn("[red]Estad√≠stica[/]")
                .AddColumn("[green]Valor[/]");

            statsTable.AddRow("üë• Total de Usuarios", totalUsers.ToString());
            statsTable.AddRow("‚ù§Ô∏è  Total de Likes", totalLikes.ToString());
            statsTable.AddRow("üíï Total de Matches", totalMatches.ToString());

            AnsiConsole.Write(statsTable);

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task ShowUserManagementAsync()
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Gestionar Mi Perfil[/]")
                    .RuleStyle("blue")
                    .Centered());

            try
            {
                var currentUser = await _userService.GetUserByIdAsync(_currentUser!.UserId);
                if (currentUser == null)
                {
                    AnsiConsole.MarkupLine("[red]‚ùå Error: Usuario no encontrado[/]");
                    return;
                }

                var choice = AnsiConsole.Prompt(
                    new SelectionPrompt<string>()
                        .Title("[green]¬øQu√© deseas hacer?[/]")
                        .AddChoices(new[] {
                            "üëÅÔ∏è  Ver mi perfil",
                            "‚úèÔ∏è  Editar mi perfil",
                            "üîí Cambiar contrase√±a",
                            "üîô Volver al men√∫ principal"
                        }));

                switch (choice)
                {
                    case "üëÅÔ∏è  Ver mi perfil":
                        await ShowMyProfileAsync(currentUser);
                        break;
                    case "‚úèÔ∏è  Editar mi perfil":
                        await EditMyProfileAsync(currentUser);
                        break;
                    case "üîí Cambiar contrase√±a":
                        await ChangeMyPasswordAsync(currentUser);
                        break;
                    case "üîô Volver al men√∫ principal":
                        return;
                }
            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå Error: {ex.Message}[/]");
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task ShowMyProfileAsync(UserEntity currentUser)
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Mi Perfil[/]")
                    .RuleStyle("blue")
                    .Centered());

            var profileTable = new Table()
                .Border(TableBorder.Rounded)
                .AddColumn("[blue]Campo[/]")
                .AddColumn("[green]Valor[/]");

            profileTable.AddRow("üë§ Nombre", currentUser.FullName);
            profileTable.AddRow("üìß Email", currentUser.Email);
            profileTable.AddRow("üéÇ Fecha de nacimiento", currentUser.Birthdate.ToString("dd/MM/yyyy"));
            profileTable.AddRow("üë• G√©nero", await GetGenderNameAsync(currentUser.GenderId));
            profileTable.AddRow("üë• Orientaci√≥n", await GetOrientationNameAsync(currentUser.OrientationId));
            profileTable.AddRow("üéì Carrera/Profesi√≥n", await GetCareerNameAsync(currentUser.CareerId));
            profileTable.AddRow("üí¨ Frase de perfil", currentUser.ProfilePhrase);

            AnsiConsole.Write(profileTable);
        }

        private async Task EditMyProfileAsync(UserEntity currentUser)
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]‚úèÔ∏è  Editar Mi Perfil[/]")
                    .RuleStyle("blue")
                    .Centered());

            try
            {
                var newName = AnsiConsole.Ask<string>($"[green]Nuevo nombre (actual: {currentUser.FullName}):[/]", currentUser.FullName);
                var newEmail = AnsiConsole.Ask<string>($"[green]Nuevo email (actual: {currentUser.Email}):[/]", currentUser.Email);
                
                currentUser.FullName = newName;
                currentUser.Email = newEmail;

                if (AnsiConsole.Confirm("[yellow]¬øConfirmar los cambios?[/]"))
                {
                    await _userService.UpdateUserAsync(currentUser);
                    AnsiConsole.MarkupLine("[green]‚úÖ Perfil actualizado exitosamente![/]");
                }
            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå Error: {ex.Message}[/]");
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        private async Task ChangeMyPasswordAsync(UserEntity currentUser)
        {
            AnsiConsole.Clear();
            AnsiConsole.Write(
                new Rule("[blue]Cambiar Contrase√±a[/]")
                    .RuleStyle("blue")
                    .Centered());

            try
            {
                var currentPassword = AnsiConsole.Prompt(
                    new TextPrompt<string>("[green]Contrase√±a actual:[/]")
                        .Secret());

                var newPassword = AnsiConsole.Prompt(
                    new TextPrompt<string>("[green]Nueva contrase√±a:[/]")
                        .Secret()
                        .ValidationErrorMessage("[red]La contrase√±a debe tener al menos 6 caracteres[/]")
                        .Validate(password => password.Length >= 6 ? ValidationResult.Success() : ValidationResult.Error()));

                var confirmPassword = AnsiConsole.Prompt(
                    new TextPrompt<string>("[green]Confirmar nueva contrase√±a:[/]")
                        .Secret());

                if (newPassword != confirmPassword)
                {
                    AnsiConsole.MarkupLine("[red]‚ùå Las contrase√±as no coinciden[/]");
                    return;
                }

                var success = await _userService.ChangePasswordAsync(currentUser.UserId, currentPassword, newPassword);
                
                if (success)
                {
                    AnsiConsole.MarkupLine("[green]‚úÖ Contrase√±a cambiada exitosamente[/]");
                }
                else
                {
                    AnsiConsole.MarkupLine("[red]‚ùå La contrase√±a actual es incorrecta[/]");
                }
            }
            catch (Exception ex)
            {
                AnsiConsole.MarkupLine($"[red]‚ùå Error: {ex.Message}[/]");
            }

            AnsiConsole.WriteLine("[blue]Presiona cualquier tecla para continuar...[/]");
            Console.ReadKey();
        }

        // M√©todos auxiliares
        private async Task<int> SelectGenderAsync()
        {
            var genderOptions = new Dictionary<string, int>
            {
                { "Masculino", 1 },
                { "Femenino", 2 },
                { "No binario", 3 }
            };

            var choice = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[green]Selecciona el g√©nero:[/]")
                    .AddChoices(genderOptions.Keys));

            return genderOptions[choice];
        }

        private async Task<int> SelectOrientationAsync()
        {
            var orientationOptions = new Dictionary<string, int>
            {
                { "Heterosexual", 1 },
                { "Homosexual", 2 },
                { "Bisexual", 3 },
                { "Pansexual", 4 }
            };

            var choice = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[green]Selecciona la orientaci√≥n:[/]")
                    .AddChoices(orientationOptions.Keys));

            return orientationOptions[choice];
        }

        private async Task<int> SelectCareerAsync()
        {
            var careers = new List<(int id, string name, string category)>
            {
                (1, "Ingenier√≠a de Sistemas", "Ingenier√≠a"),
                (2, "Ingenier√≠a Inform√°tica", "Ingenier√≠a"),
                (3, "Ingenier√≠a Civil", "Ingenier√≠a"),
                (4, "Medicina", "Ciencias de la Salud"),
                (5, "Enfermer√≠a", "Ciencias de la Salud"),
                (6, "Odontolog√≠a", "Ciencias de la Salud"),
                (7, "Derecho", "Ciencias Sociales"),
                (8, "Psicolog√≠a", "Ciencias Sociales"),
                (9, "Administraci√≥n de Empresas", "Ciencias Sociales"),
                (10, "Contabilidad", "Ciencias Sociales"),
                (11, "Matem√°ticas", "Ciencias"),
                (12, "F√≠sica", "Ciencias"),
                (13, "Qu√≠mica", "Ciencias"),
                (14, "Biolog√≠a", "Ciencias"),
                (15, "Arquitectura", "Arte y Dise√±o"),
                (16, "Dise√±o Gr√°fico", "Arte y Dise√±o"),
                (17, "M√∫sica", "Arte y Dise√±o")
            };

            var groupedCareers = careers.GroupBy(c => c.category).ToList();

            AnsiConsole.WriteLine();
            AnsiConsole.MarkupLine("[green]Selecciona tu carrera/profesi√≥n:[/]");
            AnsiConsole.WriteLine();

            var careerChoices = new List<string>();
            var careerIds = new List<int>();

            foreach (var group in groupedCareers)
            {
                AnsiConsole.MarkupLine($"[blue]{group.Key}:[/]");
                foreach (var career in group)
                {
                    var choice = $"{career.name}";
                    careerChoices.Add(choice);
                    careerIds.Add(career.id);
                    AnsiConsole.MarkupLine($"  {career.id}. {career.name}");
                }
                AnsiConsole.WriteLine();
            }

            var selectedIndex = AnsiConsole.Prompt(
                new SelectionPrompt<string>()
                    .Title("[green]Selecciona tu carrera:[/]")
                    .AddChoices(careerChoices));

            var selectedCareerIndex = careerChoices.IndexOf(selectedIndex);
            return careerIds[selectedCareerIndex];
        }

        private async Task<string> GetGenderNameAsync(int genderId)
        {
            var genderNames = new Dictionary<int, string>
            {
                { 1, "Masculino" },
                { 2, "Femenino" },
                { 3, "No binario" }
            };

            return genderNames.TryGetValue(genderId, out var name) ? name : "Desconocido";
        }

        private async Task<string> GetOrientationNameAsync(int orientationId)
        {
            var orientationNames = new Dictionary<int, string>
            {
                { 1, "Heterosexual" },
                { 2, "Homosexual" },
                { 3, "Bisexual" },
                { 4, "Pansexual" }
            };

            return orientationNames.TryGetValue(orientationId, out var name) ? name : "Desconocido";
        }

        private async Task<string> GetCareerNameAsync(int careerId)
        {
            var careerNames = new Dictionary<int, string>
            {
                { 1, "Ingenier√≠a de Sistemas" },
                { 2, "Ingenier√≠a Inform√°tica" },
                { 3, "Ingenier√≠a Civil" },
                { 4, "Medicina" },
                { 5, "Enfermer√≠a" },
                { 6, "Odontolog√≠a" },
                { 7, "Derecho" },
                { 8, "Psicolog√≠a" },
                { 9, "Administraci√≥n de Empresas" },
                { 10, "Contabilidad" },
                { 11, "Matem√°ticas" },
                { 12, "F√≠sica" },
                { 13, "Qu√≠mica" },
                { 14, "Biolog√≠a" },
                { 15, "Arquitectura" },
                { 16, "Dise√±o Gr√°fico" },
                { 17, "M√∫sica" }
            };

            return careerNames.TryGetValue(careerId, out var name) ? name : "Desconocida";
        }

        private Table CreateUsersTable(List<UserEntity> users)
        {
            var table = new Table()
                .Border(TableBorder.Rounded)
                .AddColumn("[blue]Nombre[/]")
                .AddColumn("[green]Email[/]")
                                    .AddColumn("[blue]Edad[/]")
                .AddColumn("[blue]G√©nero[/]");

            foreach (var user in users)
            {
                table.AddRow(
                    user.FullName,
                    user.Email,
                    CalculateAge(user.Birthdate).ToString() + " a√±os",
                    GetGenderNameAsync(user.GenderId).Result
                );
            }

            return table;
        }

        private int CalculateAge(DateTime birthdate)
        {
            var today = DateTime.Today;
            var age = today.Year - birthdate.Year;
            if (birthdate.Date > today.AddYears(-age)) age--;
            return age;
        }
    }
}

